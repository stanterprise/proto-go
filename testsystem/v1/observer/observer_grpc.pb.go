// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: testsystem/v1/observer/observer.proto

package observer

import (
	context "context"
	events "github.com/stanterprise/proto-go/testsystem/v1/events"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TestEventCollector_ReportTestStart_FullMethodName  = "/testsystem.v1.observer.TestEventCollector/ReportTestStart"
	TestEventCollector_ReportTestFinish_FullMethodName = "/testsystem.v1.observer.TestEventCollector/ReportTestFinish"
	TestEventCollector_ReportTestStep_FullMethodName   = "/testsystem.v1.observer.TestEventCollector/ReportTestStep"
)

// TestEventCollectorClient is the client API for TestEventCollector service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TestEventCollectorClient interface {
	ReportTestStart(ctx context.Context, in *events.TestStartEventRequest, opts ...grpc.CallOption) (*AckResponse, error)
	ReportTestFinish(ctx context.Context, in *events.TestFinishEventRequest, opts ...grpc.CallOption) (*AckResponse, error)
	ReportTestStep(ctx context.Context, in *events.TestStepEventRequest, opts ...grpc.CallOption) (*AckResponse, error)
}

type testEventCollectorClient struct {
	cc grpc.ClientConnInterface
}

func NewTestEventCollectorClient(cc grpc.ClientConnInterface) TestEventCollectorClient {
	return &testEventCollectorClient{cc}
}

func (c *testEventCollectorClient) ReportTestStart(ctx context.Context, in *events.TestStartEventRequest, opts ...grpc.CallOption) (*AckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AckResponse)
	err := c.cc.Invoke(ctx, TestEventCollector_ReportTestStart_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testEventCollectorClient) ReportTestFinish(ctx context.Context, in *events.TestFinishEventRequest, opts ...grpc.CallOption) (*AckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AckResponse)
	err := c.cc.Invoke(ctx, TestEventCollector_ReportTestFinish_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testEventCollectorClient) ReportTestStep(ctx context.Context, in *events.TestStepEventRequest, opts ...grpc.CallOption) (*AckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AckResponse)
	err := c.cc.Invoke(ctx, TestEventCollector_ReportTestStep_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TestEventCollectorServer is the server API for TestEventCollector service.
// All implementations must embed UnimplementedTestEventCollectorServer
// for forward compatibility.
type TestEventCollectorServer interface {
	ReportTestStart(context.Context, *events.TestStartEventRequest) (*AckResponse, error)
	ReportTestFinish(context.Context, *events.TestFinishEventRequest) (*AckResponse, error)
	ReportTestStep(context.Context, *events.TestStepEventRequest) (*AckResponse, error)
	mustEmbedUnimplementedTestEventCollectorServer()
}

// UnimplementedTestEventCollectorServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTestEventCollectorServer struct{}

func (UnimplementedTestEventCollectorServer) ReportTestStart(context.Context, *events.TestStartEventRequest) (*AckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportTestStart not implemented")
}
func (UnimplementedTestEventCollectorServer) ReportTestFinish(context.Context, *events.TestFinishEventRequest) (*AckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportTestFinish not implemented")
}
func (UnimplementedTestEventCollectorServer) ReportTestStep(context.Context, *events.TestStepEventRequest) (*AckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportTestStep not implemented")
}
func (UnimplementedTestEventCollectorServer) mustEmbedUnimplementedTestEventCollectorServer() {}
func (UnimplementedTestEventCollectorServer) testEmbeddedByValue()                            {}

// UnsafeTestEventCollectorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TestEventCollectorServer will
// result in compilation errors.
type UnsafeTestEventCollectorServer interface {
	mustEmbedUnimplementedTestEventCollectorServer()
}

func RegisterTestEventCollectorServer(s grpc.ServiceRegistrar, srv TestEventCollectorServer) {
	// If the following call pancis, it indicates UnimplementedTestEventCollectorServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TestEventCollector_ServiceDesc, srv)
}

func _TestEventCollector_ReportTestStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(events.TestStartEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestEventCollectorServer).ReportTestStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TestEventCollector_ReportTestStart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestEventCollectorServer).ReportTestStart(ctx, req.(*events.TestStartEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestEventCollector_ReportTestFinish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(events.TestFinishEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestEventCollectorServer).ReportTestFinish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TestEventCollector_ReportTestFinish_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestEventCollectorServer).ReportTestFinish(ctx, req.(*events.TestFinishEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestEventCollector_ReportTestStep_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(events.TestStepEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestEventCollectorServer).ReportTestStep(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TestEventCollector_ReportTestStep_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestEventCollectorServer).ReportTestStep(ctx, req.(*events.TestStepEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TestEventCollector_ServiceDesc is the grpc.ServiceDesc for TestEventCollector service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TestEventCollector_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "testsystem.v1.observer.TestEventCollector",
	HandlerType: (*TestEventCollectorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReportTestStart",
			Handler:    _TestEventCollector_ReportTestStart_Handler,
		},
		{
			MethodName: "ReportTestFinish",
			Handler:    _TestEventCollector_ReportTestFinish_Handler,
		},
		{
			MethodName: "ReportTestStep",
			Handler:    _TestEventCollector_ReportTestStep_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "testsystem/v1/observer/observer.proto",
}
