// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: testsystem/v1/entities/test_case.proto

package entities

import (
	common "github.com/stanterprise/proto-go/testsystem/v1/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TestCaseSpec struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                                                                       // Unique identifier for the test script
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                                                                   // Name of the test script
	Description   string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`                                                                     // Description of the test script
	Metadata      map[string]string      `protobuf:"bytes,4,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // Additional metadata for the test script
	Status        common.TestStatus      `protobuf:"varint,5,opt,name=status,proto3,enum=testsystem.v1.common.TestStatus" json:"status,omitempty"`                                         // Current status of the test script
	ParentSuiteId string                 `protobuf:"bytes,6,opt,name=parent_suite_id,json=parentSuiteId,proto3" json:"parent_suite_id,omitempty"`                                          // Reference to the parent suite, if any
	Tags          []string               `protobuf:"bytes,7,rep,name=tags,proto3" json:"tags,omitempty"`                                                                                   // Tags associated with the test case
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TestCaseSpec) Reset() {
	*x = TestCaseSpec{}
	mi := &file_testsystem_v1_entities_test_case_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestCaseSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestCaseSpec) ProtoMessage() {}

func (x *TestCaseSpec) ProtoReflect() protoreflect.Message {
	mi := &file_testsystem_v1_entities_test_case_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestCaseSpec.ProtoReflect.Descriptor instead.
func (*TestCaseSpec) Descriptor() ([]byte, []int) {
	return file_testsystem_v1_entities_test_case_proto_rawDescGZIP(), []int{0}
}

func (x *TestCaseSpec) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TestCaseSpec) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TestCaseSpec) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *TestCaseSpec) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *TestCaseSpec) GetStatus() common.TestStatus {
	if x != nil {
		return x.Status
	}
	return common.TestStatus(0)
}

func (x *TestCaseSpec) GetParentSuiteId() string {
	if x != nil {
		return x.ParentSuiteId
	}
	return ""
}

func (x *TestCaseSpec) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type TestCaseRun struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Id             string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                                                                        // Unique identifier for the test result
	TestId         string                 `protobuf:"bytes,2,opt,name=test_id,json=testId,proto3" json:"test_id,omitempty"`                                                                  // Reference to the test case
	RunId          string                 `protobuf:"bytes,3,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`                                                                     // Identifier for the global test run this test belongs to
	TestSuiteRunId string                 `protobuf:"bytes,4,opt,name=test_suite_run_id,json=testSuiteRunId,proto3" json:"test_suite_run_id,omitempty"`                                      // Reference to the test suite run this test belongs to
	Title          string                 `protobuf:"bytes,5,opt,name=title,proto3" json:"title,omitempty"`                                                                                  // Title of the test result
	Status         common.TestStatus      `protobuf:"varint,6,opt,name=status,proto3,enum=testsystem.v1.common.TestStatus" json:"status,omitempty"`                                          // Result status (e.g., "passed", "failed", "skipped")
	StartTime      *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`                                                         // Start time of the test execution
	Attachments    []*common.Attachment   `protobuf:"bytes,8,rep,name=attachments,proto3" json:"attachments,omitempty"`                                                                      // Attachments related to the test result
	ErrorMessage   string                 `protobuf:"bytes,9,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`                                                // Error message if the test failed
	StackTrace     string                 `protobuf:"bytes,10,opt,name=stack_trace,json=stackTrace,proto3" json:"stack_trace,omitempty"`                                                     // Stack trace if applicable
	Metadata       map[string]string      `protobuf:"bytes,11,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // Additional metadata for the test result
	Errors         []string               `protobuf:"bytes,12,rep,name=errors,proto3" json:"errors,omitempty"`                                                                               // List of error messages if any
	ActualTags     []string               `protobuf:"bytes,13,rep,name=actual_tags,json=actualTags,proto3" json:"actual_tags,omitempty"`                                                     // Actual tags associated with the test case during execution
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *TestCaseRun) Reset() {
	*x = TestCaseRun{}
	mi := &file_testsystem_v1_entities_test_case_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestCaseRun) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestCaseRun) ProtoMessage() {}

func (x *TestCaseRun) ProtoReflect() protoreflect.Message {
	mi := &file_testsystem_v1_entities_test_case_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestCaseRun.ProtoReflect.Descriptor instead.
func (*TestCaseRun) Descriptor() ([]byte, []int) {
	return file_testsystem_v1_entities_test_case_proto_rawDescGZIP(), []int{1}
}

func (x *TestCaseRun) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TestCaseRun) GetTestId() string {
	if x != nil {
		return x.TestId
	}
	return ""
}

func (x *TestCaseRun) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

func (x *TestCaseRun) GetTestSuiteRunId() string {
	if x != nil {
		return x.TestSuiteRunId
	}
	return ""
}

func (x *TestCaseRun) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *TestCaseRun) GetStatus() common.TestStatus {
	if x != nil {
		return x.Status
	}
	return common.TestStatus(0)
}

func (x *TestCaseRun) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *TestCaseRun) GetAttachments() []*common.Attachment {
	if x != nil {
		return x.Attachments
	}
	return nil
}

func (x *TestCaseRun) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *TestCaseRun) GetStackTrace() string {
	if x != nil {
		return x.StackTrace
	}
	return ""
}

func (x *TestCaseRun) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *TestCaseRun) GetErrors() []string {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *TestCaseRun) GetActualTags() []string {
	if x != nil {
		return x.ActualTags
	}
	return nil
}

type StepRun struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                                                                       // Unique identifier for the step result
	RunId         string                 `protobuf:"bytes,2,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`                                                                    // Identifier for the global test run this step belongs to
	TestCaseRunId string                 `protobuf:"bytes,3,opt,name=test_case_run_id,json=testCaseRunId,proto3" json:"test_case_run_id,omitempty"`                                        // Reference to the test case run this step belongs to
	Title         string                 `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`                                                                                 // Title of the step
	Description   string                 `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`                                                                     // Description of the step
	StartTime     *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`                                                        // Start time of the test execution
	Duration      *durationpb.Duration   `protobuf:"bytes,7,opt,name=duration,proto3" json:"duration,omitempty"`                                                                           // Estimated duration in seconds
	Type          string                 `protobuf:"bytes,8,opt,name=type,proto3" json:"type,omitempty"`                                                                                   // Type of the step (e.g., "setup", "execution", "validation")
	Metadata      map[string]string      `protobuf:"bytes,9,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // Additional metadata for the step
	ParentStepId  string                 `protobuf:"bytes,10,opt,name=parent_step_id,json=parentStepId,proto3" json:"parent_step_id,omitempty"`                                            // Reference to the parent step for nested steps, if any
	WorkerIndex   string                 `protobuf:"bytes,11,opt,name=worker_index,json=workerIndex,proto3" json:"worker_index,omitempty"`                                                 // Identifier for the worker executing the step
	Status        common.TestStatus      `protobuf:"varint,12,opt,name=status,proto3,enum=testsystem.v1.common.TestStatus" json:"status,omitempty"`                                        // Result status (e.g., "passed", "failed", "skipped")
	Error         string                 `protobuf:"bytes,13,opt,name=error,proto3" json:"error,omitempty"`                                                                                // Error message if the step failed
	Errors        []string               `protobuf:"bytes,14,rep,name=errors,proto3" json:"errors,omitempty"`                                                                              // List of all error messages observed during step execution, if any
	Location      string                 `protobuf:"bytes,15,opt,name=location,proto3" json:"location,omitempty"`                                                                          // Location in the code where the step is defined
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StepRun) Reset() {
	*x = StepRun{}
	mi := &file_testsystem_v1_entities_test_case_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StepRun) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StepRun) ProtoMessage() {}

func (x *StepRun) ProtoReflect() protoreflect.Message {
	mi := &file_testsystem_v1_entities_test_case_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StepRun.ProtoReflect.Descriptor instead.
func (*StepRun) Descriptor() ([]byte, []int) {
	return file_testsystem_v1_entities_test_case_proto_rawDescGZIP(), []int{2}
}

func (x *StepRun) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *StepRun) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

func (x *StepRun) GetTestCaseRunId() string {
	if x != nil {
		return x.TestCaseRunId
	}
	return ""
}

func (x *StepRun) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *StepRun) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *StepRun) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *StepRun) GetDuration() *durationpb.Duration {
	if x != nil {
		return x.Duration
	}
	return nil
}

func (x *StepRun) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *StepRun) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *StepRun) GetParentStepId() string {
	if x != nil {
		return x.ParentStepId
	}
	return ""
}

func (x *StepRun) GetWorkerIndex() string {
	if x != nil {
		return x.WorkerIndex
	}
	return ""
}

func (x *StepRun) GetStatus() common.TestStatus {
	if x != nil {
		return x.Status
	}
	return common.TestStatus(0)
}

func (x *StepRun) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *StepRun) GetErrors() []string {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *StepRun) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

var File_testsystem_v1_entities_test_case_proto protoreflect.FileDescriptor

const file_testsystem_v1_entities_test_case_proto_rawDesc = "" +
	"\n" +
	"&testsystem/v1/entities/test_case.proto\x12\x16testsystem.v1.entities\x1a!testsystem/v1/common/common.proto\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x1egoogle/protobuf/duration.proto\"\xd7\x02\n" +
	"\fTestCaseSpec\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12 \n" +
	"\vdescription\x18\x03 \x01(\tR\vdescription\x12N\n" +
	"\bmetadata\x18\x04 \x03(\v22.testsystem.v1.entities.TestCaseSpec.MetadataEntryR\bmetadata\x128\n" +
	"\x06status\x18\x05 \x01(\x0e2 .testsystem.v1.common.TestStatusR\x06status\x12&\n" +
	"\x0fparent_suite_id\x18\x06 \x01(\tR\rparentSuiteId\x12\x12\n" +
	"\x04tags\x18\a \x03(\tR\x04tags\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xd2\x04\n" +
	"\vTestCaseRun\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x17\n" +
	"\atest_id\x18\x02 \x01(\tR\x06testId\x12\x15\n" +
	"\x06run_id\x18\x03 \x01(\tR\x05runId\x12)\n" +
	"\x11test_suite_run_id\x18\x04 \x01(\tR\x0etestSuiteRunId\x12\x14\n" +
	"\x05title\x18\x05 \x01(\tR\x05title\x128\n" +
	"\x06status\x18\x06 \x01(\x0e2 .testsystem.v1.common.TestStatusR\x06status\x129\n" +
	"\n" +
	"start_time\x18\a \x01(\v2\x1a.google.protobuf.TimestampR\tstartTime\x12B\n" +
	"\vattachments\x18\b \x03(\v2 .testsystem.v1.common.AttachmentR\vattachments\x12#\n" +
	"\rerror_message\x18\t \x01(\tR\ferrorMessage\x12\x1f\n" +
	"\vstack_trace\x18\n" +
	" \x01(\tR\n" +
	"stackTrace\x12M\n" +
	"\bmetadata\x18\v \x03(\v21.testsystem.v1.entities.TestCaseRun.MetadataEntryR\bmetadata\x12\x16\n" +
	"\x06errors\x18\f \x03(\tR\x06errors\x12\x1f\n" +
	"\vactual_tags\x18\r \x03(\tR\n" +
	"actualTags\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xec\x04\n" +
	"\aStepRun\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x15\n" +
	"\x06run_id\x18\x02 \x01(\tR\x05runId\x12'\n" +
	"\x10test_case_run_id\x18\x03 \x01(\tR\rtestCaseRunId\x12\x14\n" +
	"\x05title\x18\x04 \x01(\tR\x05title\x12 \n" +
	"\vdescription\x18\x05 \x01(\tR\vdescription\x129\n" +
	"\n" +
	"start_time\x18\x06 \x01(\v2\x1a.google.protobuf.TimestampR\tstartTime\x125\n" +
	"\bduration\x18\a \x01(\v2\x19.google.protobuf.DurationR\bduration\x12\x12\n" +
	"\x04type\x18\b \x01(\tR\x04type\x12I\n" +
	"\bmetadata\x18\t \x03(\v2-.testsystem.v1.entities.StepRun.MetadataEntryR\bmetadata\x12$\n" +
	"\x0eparent_step_id\x18\n" +
	" \x01(\tR\fparentStepId\x12!\n" +
	"\fworker_index\x18\v \x01(\tR\vworkerIndex\x128\n" +
	"\x06status\x18\f \x01(\x0e2 .testsystem.v1.common.TestStatusR\x06status\x12\x14\n" +
	"\x05error\x18\r \x01(\tR\x05error\x12\x16\n" +
	"\x06errors\x18\x0e \x03(\tR\x06errors\x12\x1a\n" +
	"\blocation\x18\x0f \x01(\tR\blocation\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01Bd\n" +
	"'com.stanterprise.testsystem.v1.entitiesP\x01Z7github.com/stanterprise/proto-go/testsystem/v1/entitiesb\x06proto3"

var (
	file_testsystem_v1_entities_test_case_proto_rawDescOnce sync.Once
	file_testsystem_v1_entities_test_case_proto_rawDescData []byte
)

func file_testsystem_v1_entities_test_case_proto_rawDescGZIP() []byte {
	file_testsystem_v1_entities_test_case_proto_rawDescOnce.Do(func() {
		file_testsystem_v1_entities_test_case_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_testsystem_v1_entities_test_case_proto_rawDesc), len(file_testsystem_v1_entities_test_case_proto_rawDesc)))
	})
	return file_testsystem_v1_entities_test_case_proto_rawDescData
}

var file_testsystem_v1_entities_test_case_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_testsystem_v1_entities_test_case_proto_goTypes = []any{
	(*TestCaseSpec)(nil),          // 0: testsystem.v1.entities.TestCaseSpec
	(*TestCaseRun)(nil),           // 1: testsystem.v1.entities.TestCaseRun
	(*StepRun)(nil),               // 2: testsystem.v1.entities.StepRun
	nil,                           // 3: testsystem.v1.entities.TestCaseSpec.MetadataEntry
	nil,                           // 4: testsystem.v1.entities.TestCaseRun.MetadataEntry
	nil,                           // 5: testsystem.v1.entities.StepRun.MetadataEntry
	(common.TestStatus)(0),        // 6: testsystem.v1.common.TestStatus
	(*timestamppb.Timestamp)(nil), // 7: google.protobuf.Timestamp
	(*common.Attachment)(nil),     // 8: testsystem.v1.common.Attachment
	(*durationpb.Duration)(nil),   // 9: google.protobuf.Duration
}
var file_testsystem_v1_entities_test_case_proto_depIdxs = []int32{
	3,  // 0: testsystem.v1.entities.TestCaseSpec.metadata:type_name -> testsystem.v1.entities.TestCaseSpec.MetadataEntry
	6,  // 1: testsystem.v1.entities.TestCaseSpec.status:type_name -> testsystem.v1.common.TestStatus
	6,  // 2: testsystem.v1.entities.TestCaseRun.status:type_name -> testsystem.v1.common.TestStatus
	7,  // 3: testsystem.v1.entities.TestCaseRun.start_time:type_name -> google.protobuf.Timestamp
	8,  // 4: testsystem.v1.entities.TestCaseRun.attachments:type_name -> testsystem.v1.common.Attachment
	4,  // 5: testsystem.v1.entities.TestCaseRun.metadata:type_name -> testsystem.v1.entities.TestCaseRun.MetadataEntry
	7,  // 6: testsystem.v1.entities.StepRun.start_time:type_name -> google.protobuf.Timestamp
	9,  // 7: testsystem.v1.entities.StepRun.duration:type_name -> google.protobuf.Duration
	5,  // 8: testsystem.v1.entities.StepRun.metadata:type_name -> testsystem.v1.entities.StepRun.MetadataEntry
	6,  // 9: testsystem.v1.entities.StepRun.status:type_name -> testsystem.v1.common.TestStatus
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_testsystem_v1_entities_test_case_proto_init() }
func file_testsystem_v1_entities_test_case_proto_init() {
	if File_testsystem_v1_entities_test_case_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_testsystem_v1_entities_test_case_proto_rawDesc), len(file_testsystem_v1_entities_test_case_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_testsystem_v1_entities_test_case_proto_goTypes,
		DependencyIndexes: file_testsystem_v1_entities_test_case_proto_depIdxs,
		MessageInfos:      file_testsystem_v1_entities_test_case_proto_msgTypes,
	}.Build()
	File_testsystem_v1_entities_test_case_proto = out.File
	file_testsystem_v1_entities_test_case_proto_goTypes = nil
	file_testsystem_v1_entities_test_case_proto_depIdxs = nil
}
